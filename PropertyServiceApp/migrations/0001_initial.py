# Generated by Django 3.2.12 on 2022-05-07 18:52

import PropertyServiceApp.models
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='username')),
                ('fullname', models.CharField(blank=True, max_length=150)),
                ('address', models.TextField(blank=True, max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=15)),
                ('full_name', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField(blank=True, max_length=255, null=True)),
                ('role', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='PropertyServiceApp.roles')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyTracing',
            fields=[
                ('service_name', models.CharField(default='propertyTracing', max_length=55)),
                ('service_id', models.CharField(default=PropertyServiceApp.models.create_property_tracing_servId, max_length=20, primary_key=True, serialize=False)),
                ('property_title', models.CharField(blank=True, max_length=255, null=True)),
                ('property_type', models.CharField(blank=True, max_length=55, null=True)),
                ('property_description', models.CharField(blank=True, max_length=255, null=True)),
                ('available_days', models.JSONField(blank=True, null=True)),
                ('available_time', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='property_tracing', to='PropertyServiceApp.users')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyMonitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(default='propertyMonitoring', max_length=55)),
                ('monitoring_type', models.CharField(blank=True, max_length=255, null=True)),
                ('property_type', models.CharField(blank=True, max_length=55, null=True)),
                ('property_description', models.CharField(blank=True, max_length=255, null=True)),
                ('available_days', models.JSONField(blank=True, null=True)),
                ('available_time', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='property_monitoring', to='PropertyServiceApp.users')),
            ],
        ),
        migrations.CreateModel(
            name='OtherServices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(default='otherServices', max_length=55)),
                ('required_service', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city_name', models.CharField(blank=True, max_length=55, null=True)),
                ('state', models.CharField(blank=True, max_length=55, null=True)),
                ('pin_code', models.CharField(blank=True, max_length=10, null=True)),
                ('country', models.CharField(blank=True, max_length=25, null=True)),
                ('address_type', models.CharField(blank=True, max_length=30, null=True)),
                ('available_days', models.JSONField(blank=True, null=True)),
                ('available_time', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='other_service', to='PropertyServiceApp.users')),
            ],
        ),
        migrations.CreateModel(
            name='MaintainanceAndLease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(default='maintainanceAndLease', max_length=55)),
                ('property_title', models.CharField(blank=True, max_length=255, null=True)),
                ('property_type', models.CharField(blank=True, max_length=55, null=True)),
                ('property_description', models.CharField(blank=True, max_length=255, null=True)),
                ('video', models.TextField(blank=True, null=True)),
                ('virtual_tour', models.TextField(blank=True, null=True)),
                ('available_days', models.JSONField(blank=True, null=True)),
                ('available_time', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='maintainance_and_lease', to='PropertyServiceApp.users')),
            ],
        ),
        migrations.CreateModel(
            name='LegalIssues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(default='legalIssues', max_length=55)),
                ('issue_type', models.CharField(blank=True, max_length=255, null=True)),
                ('property_type', models.CharField(blank=True, max_length=55, null=True)),
                ('issue_description', models.CharField(blank=True, max_length=255, null=True)),
                ('available_days', models.JSONField(blank=True, null=True)),
                ('available_time', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='legal_issues', to='PropertyServiceApp.users')),
            ],
        ),
        migrations.CreateModel(
            name='InvestmentAdvice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(default='investmentAdvice', max_length=55)),
                ('property_id', models.CharField(blank=True, max_length=255, null=True)),
                ('property_size', models.CharField(blank=True, max_length=55, null=True)),
                ('land_size', models.CharField(blank=True, max_length=255, null=True)),
                ('beds', models.CharField(blank=True, max_length=255, null=True)),
                ('baths', models.CharField(blank=True, max_length=255, null=True)),
                ('garage', models.CharField(blank=True, max_length=255, null=True)),
                ('garage_size', models.CharField(blank=True, max_length=255, null=True)),
                ('build_year', models.CharField(blank=True, max_length=255, null=True)),
                ('property_features', models.JSONField(blank=True, null=True)),
                ('available_days', models.JSONField(blank=True, null=True)),
                ('available_time', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, related_name='investment_advice', to='PropertyServiceApp.users')),
            ],
        ),
    ]
